/*
 * auto generated by tools(注意:千万不要手动修改本文件)
 * initial_items
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Linq;

[Serializable]
public class initial_items : IBinarySerializable
{
	public int Id { get; set; }
	public int RoomType { get; set; }
	public string Comment { get; set; }
	public string Name { get; set; }
	public string ItemId { get; set; }
	public List<float> Position { get; set; }
	public List<float> Direction { get; set; }

	public void DeSerialize(BinaryReader reader)
	{
		Id = reader.ReadInt32();
		RoomType = reader.ReadInt32();
		Comment = reader.ReadString();
		Name = reader.ReadString();
		ItemId = reader.ReadString();
		var PositionCount = reader.ReadInt32();
		if (PositionCount > 0)
		{
			Position = new List<float>();
			for (int i = 0; i < PositionCount; i++)
			{
				Position.Add(reader.ReadSingle());
			}
		}
		else
		{
			Position = null;
		}
		var DirectionCount = reader.ReadInt32();
		if (DirectionCount > 0)
		{
			Direction = new List<float>();
			for (int i = 0; i < DirectionCount; i++)
			{
				Direction.Add(reader.ReadSingle());
			}
		}
		else
		{
			Direction = null;
		}
	}

	public void Serialize(BinaryWriter writer)
	{
		writer.Write(Id);
		writer.Write(RoomType);
		writer.Write(Comment);
		writer.Write(Name);
		writer.Write(ItemId);
		if (Position == null || Position.Count == 0)
		{
			writer.Write(0);
		}
		else
		{
			writer.Write(Position.Count);
			for (int i = 0; i < Position.Count; i++)
			{
				writer.Write(Position[i]);
			}
		}
		if (Direction == null || Direction.Count == 0)
		{
			writer.Write(0);
		}
		else
		{
			writer.Write(Direction.Count);
			for (int i = 0; i < Direction.Count; i++)
			{
				writer.Write(Direction[i]);
			}
		}
	}
}

[Serializable]
public partial class initial_itemsConfig : IBinarySerializable
{
	public List<initial_items> initial_itemsInfos = new List<initial_items>();
	public void DeSerialize(BinaryReader reader)
	{
		int count = reader.ReadInt32();
		for (int i = 0;i < count; i++)
		{
			initial_items tempData = new initial_items();
			tempData.DeSerialize(reader);
			initial_itemsInfos.Add(tempData);
		}
	}

	public void Serialize(BinaryWriter writer)
	{
		writer.Write(initial_itemsInfos.Count);
		for (int i = 0; i < initial_itemsInfos.Count; i++)
		{
			initial_itemsInfos[i].Serialize(writer);
		}
	}

	public IEnumerable<initial_items> QueryById(int id)
	{
		var datas = from d in initial_itemsInfos
					where d.Id == id
					select d;
		return datas;
	}
}
