/*
 * auto generated by tools(注意:千万不要手动修改本文件)
 * bag_item
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Linq;

[Serializable]
public class bag_item : IBinarySerializable
{
	public int Id { get; set; }
	public string Comment { get; set; }
	public string Name { get; set; }
	public string Description { get; set; }
	public int Icon { get; set; }
	public string ItemType { get; set; }
	public int Generator { get; set; }
	public int Max { get; set; }
	public int Droppable { get; set; }

	public void DeSerialize(BinaryReader reader)
	{
		Id = reader.ReadInt32();
		Comment = reader.ReadString();
		Name = reader.ReadString();
		Description = reader.ReadString();
		Icon = reader.ReadInt32();
		ItemType = reader.ReadString();
		Generator = reader.ReadInt32();
		Max = reader.ReadInt32();
		Droppable = reader.ReadInt32();
	}

	public void Serialize(BinaryWriter writer)
	{
		writer.Write(Id);
		writer.Write(Comment);
		writer.Write(Name);
		writer.Write(Description);
		writer.Write(Icon);
		writer.Write(ItemType);
		writer.Write(Generator);
		writer.Write(Max);
		writer.Write(Droppable);
	}
}

[Serializable]
public partial class bag_itemConfig : IBinarySerializable
{
	public List<bag_item> bag_itemInfos = new List<bag_item>();
	public void DeSerialize(BinaryReader reader)
	{
		int count = reader.ReadInt32();
		for (int i = 0;i < count; i++)
		{
			bag_item tempData = new bag_item();
			tempData.DeSerialize(reader);
			bag_itemInfos.Add(tempData);
		}
	}

	public void Serialize(BinaryWriter writer)
	{
		writer.Write(bag_itemInfos.Count);
		for (int i = 0; i < bag_itemInfos.Count; i++)
		{
			bag_itemInfos[i].Serialize(writer);
		}
	}

	public IEnumerable<bag_item> QueryById(int id)
	{
		var datas = from d in bag_itemInfos
					where d.Id == id
					select d;
		return datas;
	}
}
